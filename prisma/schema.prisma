// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  bio           String?
  sessions      Session[]
  accounts      Account[]
  inventories   Inventory[]
  activityLogs  ActivityLog[]
  tags          Tag[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Inventory {
  id           String        @id @default(cuid())
  name         String
  description  String?
  items        Item[]
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  activityLogs ActivityLog[]
}

enum ItemStatus {
  Available
  InUse
  Broken
  Repair
  Lost
}

model Item {
  id           String        @id @default(cuid())
  name         String
  serialNumber String?
  status       ItemStatus
  description  String?
  quantity     Int
  inventoryId  String
  inventory    Inventory     @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  lastVerified DateTime?
  activityLogs ActivityLog[]
  tags         Tag[]

  @@unique([serialNumber, inventoryId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  items     Item[]

  @@unique([name, userId])
  @@map("tags")
}

enum ActivityActions {
  CREATE_INVENTORY
  VIEW_INVENTORY
  EDIT_INVENTORY
  DELETE_INVENTORY
  CREATE_ITEM
  VIEW_ITEM
  EDIT_ITEM
  DELETE_ITEM
  VERIFY_ITEM_BY_SERIAL
  SEARCH_ITEMS
  VIEW_ALL_INVENTORIES
  EXPORT_ALL_INVENTORIES
  IMPORT_ALL_INVENTORIES
  EXPORT_INVENTORY
  IMPORT_INVENTORY
  VERIFY_SELECTED_ITEMS
  DELETE_SELECTED_ITEMS
  DELETE_SELECTED_INVENTORIES
  UPDATE_PROFILE
}

model ActivityLog {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  action      ActivityActions
  inventoryId String? // Optional: An activity might not always be related to a specific inventory
  inventory   Inventory?      @relation(fields: [inventoryId], references: [id])
  itemId      String? // Optional: An activity might not always be related to a specific item
  item        Item?           @relation(fields: [itemId], references: [id])
  metadata    Json?
  createdAt   DateTime        @default(now())
}
